#!/usr/bin/env python3
import html.parser
import sys

import httpx


service = 'https://uri.lily.flowers/'


class AliasExistsError(Exception):
    pass


class BadAliasError(Exception):
    pass


class UnknownError(Exception):
    pass


class MessageParser(html.parser.HTMLParser):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.capture = 0
        self.message = None
        self.href = None

    def handle_starttag(self, tag, attrs):
        if self.capture:
            self.capture += 1

            if not self.href:
                for attr in attrs:
                    key, val = attr
                    if key.lower() == 'href':
                        self.href = val
        else:
            for attr in attrs:
                key, val = attr
                if key.lower() == 'id' and val.lower() == 'message':
                    self.capture = 1
                    self.message = ''

    def handle_endtag(self, tag):
        if self.capture:
            self.capture -= 1

    def handle_data(self, data):
        if self.capture:
            self.message += data


def create(uri, alias=None):
    parser = MessageParser()

    resp = httpx.post(service, data={
        'uri': uri,
        'alias': alias if alias is not None else '',
    })

    parser.feed(resp.text)

    if 'alias already exists' in parser.message.lower():
        raise AliasExistsError()
    if 'alias is not valid' in parser.message.lower():
        raise BadAliasError()
    if 'success' not in parser.message.lower():
        raise UnknownError()

    return parser.href


if __name__ == '__main__':
    from argparse import ArgumentParser

    parser = ArgumentParser(description='create temporary redirects using the service at {}'.format(service))
    parser.add_argument('-a', '--alias', dest='alias', help='alias to link from (random if omitted)')
    parser.add_argument('uri', help='uri to shorten')

    args = parser.parse_args()

    try:
        print('created at ' + create(args.uri, args.alias))
    except AliasExistsError:
        print('furi: error: alias already exists', file=sys.stderr)
        sys.exit(3)
    except BadAliasError:
        print('furi: error: alias is invalid', file=sys.stderr)
        sys.exit(5)
    except UnknownError:
        print('furi: error: an unknown error occured', file=sys.stderr)
        sys.exit(1)
